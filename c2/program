#!/usr/bin/python3
# Python >= 3.4

"""
usage: program [-h] [--concurrent] [--verbose]

Read cases from STDIN and print results to STDOUT

examples:
  ./program -v < sampleInput
  ./program < testInput.txt > testOutput.txt
  ./program -cv < testInput.txt > testOutput.txt
"""

from itertools import islice, cycle, count, compress
from functools import reduce

### Helpers

def primes():
    """Yield prime integers using the Croft Spiral sieve.

    This is a variant of wheel factorisation modulo 30.
    """
    # Copied from:
    #   https://code.google.com/p/pyprimes/source/browse/src/pyprimes.py
    # Implementation is based on erat3 from here:
    #   http://stackoverflow.com/q/2211990
    # and this website:
    #   http://www.primesdemystified.com/
    # Memory usage increases roughly linearly with the number of primes seen.
    # dict ``roots`` stores an entry x:p for every prime p.
    for p in (2, 3, 5):
        yield p
    roots = {9: 3, 25: 5}  # Map d**2 -> d.
    primeroots = frozenset((1, 7, 11, 13, 17, 19, 23, 29))
    selectors = (1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0)
    for q in compress(
            # Iterate over prime candidates 7, 9, 11, 13, ...
            islice(count(7), 0, None, 2),
            # Mask out those that can't possibly be prime.
            cycle(selectors)
            ):
        # Using dict membership testing instead of pop gives a
        # 5-10% speedup over the first three million primes.
        if q in roots:
            p = roots[q]
            del roots[q]
            x = q + 2*p
            while x in roots or (x % 30) not in primeroots:
                x += 2*p
            roots[x] = p
        else:
            roots[q*q] = q
            yield q

def decompose(n):
    for p in primes():
        if p*p > n: break
        while n % p == 0:
            yield p
            n //=p
    if n > 1:
        yield n


def almostprime(n):
    d = decompose(n)
    try:
        x, y = next(d), next(d)
        return n == (x * y)
    except:
        return False


### Case Solver

def solve(line):
    logger = logging.getLogger(line)
    A, B = map(int, line.split(' '))
    P = 0
    for n in range(A, B + 1):
        if n % 100000 == 0:
            logger.info(str(100*(n-A)//(B-A+1))+'%')
        P += almostprime(n)
    return P

### Main

import sys, time, logging, argparse, concurrent.futures

class Program:
    """
Read cases from STDIN and print results to STDOUT

examples:
  ./program -v < sampleInput
  ./program < testInput.txt > testOutput.txt
  ./program -cv < testInput.txt > testOutput.txt
    """

    def __init__(self, solver):
        self.solver = solver

    def main(self):
        args = self.parseargs()

        if args.verbose:
          logging.basicConfig(level=logging.DEBUG)

        ncases = int(sys.stdin.readline())
        cases = [line.strip() for line in sys.stdin.readlines()]
        if len(cases) is not ncases:
            raise ValueError()

        if args.concurrent:
            with concurrent.futures.ProcessPoolExecutor() as executor:
                results = executor.map(self.handlecase, cases)
        else:
            results = map(self.handlecase, cases)

        for result in results:
            self.showresult(*result)

    def handlecase(self, case):
        start = time.time()
        value = self.solver(case)
        seconds = time.time() - start
        return seconds, case, value

    def showresult(self, seconds, case, value):
        print(value)
        logging.info("{}s | {} = {}".format(seconds, case, value))

    def parseargs(self):
        parser = argparse.ArgumentParser(
            'program',
            description = self.__doc__,
            formatter_class = argparse.RawTextHelpFormatter
        )
        for flag in ['concurrent','verbose']:
            parser.add_argument('--%s' % flag, '-%s' % flag[0], action='store_true')
        return parser.parse_args()

if __name__ == '__main__':
    Program(solve).main()
