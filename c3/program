#!/usr/bin/python3
# Python >= 3.4

"""
usage: program [-h] [--concurrent] [--verbose] [numbers]

Read cases from STDIN and print results to STDOUT

examples:
  ./program -v < sampleInput
  ./program < testInput.txt > testOutput.txt
  ./program -cv < testInput.txt > testOutput.txt


positional arguments:
  numbers           Samos scanned numbers XZ file. Default: "numbers.txt.xz"

optional arguments:
  -h, --help        show this help message and exit
  --concurrent, -c
  --verbose, -v
"""

from itertools import islice, cycle, count, compress
from functools import reduce

### Helpers
def eratosthenes2(n):
    multiples = set()
    for i in range(2, n+1):
        if i not in multiples:
            yield i
            multiples.update(range(i*i, n+1, i))

PRIMES = list(eratosthenes2(100))

def decompose(n):
    for p in PRIMES:
        if p*p > n: break
        while n % p == 0:
            yield p
            n //=p
    if n > 1:
        yield n


### Case Solver

from collections import Counter
def solve(line, numbers):
    logger = logging.getLogger(line)
    a, b = map(int, line.split(' '))
    factors = []
    for n in numbers[a:b]:
        logger.info(n)
        factors += decompose(n)
    count = Counter(factors)
    freq = max(count.values())
    primes = sorted([k for k,v in count.items() if v == freq])
    return "%s %s" % (freq, ' '.join(map(str,primes)))

### Main

import sys, time, logging, argparse, concurrent.futures, lzma

class Program:
    """
Read cases from STDIN and print results to STDOUT

examples:
  ./program -v < sampleInput
  ./program < testInput.txt > testOutput.txt
  ./program -cv < testInput.txt > testOutput.txt
    """

    def __init__(self, solver):
        self.solver = solver

    def main(self):
        args = self.parseargs()

        if args.verbose:
          logging.basicConfig(level=logging.DEBUG)

        ncases = int(sys.stdin.readline())
        cases = [line.strip() for line in sys.stdin.readlines()]
        if len(cases) is not ncases:
            raise ValueError()

        with lzma.open(args.numbers, 'rt') as f:
            lines = f.read().splitlines()
            self.numbers = list(map(int, lines))

        if args.concurrent:
            with concurrent.futures.ProcessPoolExecutor() as executor:
                results = executor.map(self.handlecase, cases)
        else:
            results = map(self.handlecase, cases)

        for result in results:
            self.showresult(*result)

    def handlecase(self, case):
        start = time.time()
        value = self.solver(case, self.numbers)
        seconds = time.time() - start
        return seconds, case, value

    def showresult(self, seconds, case, value):
        print(value)
        logging.info("{}s | {} = {}".format(seconds, case, value))

    def parseargs(self):
        parser = argparse.ArgumentParser(
            'program',
            description = self.__doc__,
            formatter_class = argparse.RawTextHelpFormatter
        )
        for flag in ['concurrent','verbose']:
            parser.add_argument('--%s' % flag, '-%s' % flag[0], action='store_true')
        numbersfile = "numbers.txt.xz"
        parser.add_argument(
            'numbers',
            nargs='?',
            default=numbersfile,
            help='Samos scanned numbers XZ file. Default: "%s"' % numbersfile
        )
        return parser.parse_args()

if __name__ == '__main__':
    Program(solve).main()
